# dnf-automatic configuration
# vim: ft=conf
#
# {{ ansible_managed }}

[commands]
#  What kind of upgrade to perform:
# default                            = all available upgrades
# security                           = only the security upgrades
upgrade_type = {{ updates_dnf_update_cmd }}
random_sleep = {{ updates_random_sleep }}

# To just receive updates use dnf-automatic-notifyonly.timer

# Whether updates should be downloaded when they are available, by
# dnf-automatic.timer. notifyonly.timer, download.timer and
# install.timer override this setting.
download_updates = {{ updates_download | ternary('yes', 'no') }}

# Whether updates should be applied when they are available, by
# dnf-automatic.timer. notifyonly.timer, download.timer and
# install.timer override this setting.
apply_updates = {{ updates_apply | ternary('yes', 'no') }}


[emitters]
# Name to use for this system in messages that are emitted.  Default is the
# hostname.
# system_name = my-host
{%- if updates_system_name is defined and updates_system_name | length %}
system_name = "{{ updates_system_name }}"
{% endif -%}

# How to send messages.  Valid options are stdio, email and motd.  If
# emit_via includes stdio, messages will be sent to stdout; this is useful
# to have cron send the messages.  If emit_via includes email, this
# program will send email itself according to the configured options.
# If emit_via includes motd, /etc/motd file will have the messages. if
# emit_via includes command_email, then messages will be send via a shell
# command compatible with sendmail.
# Default is email,stdio.
# If emit_via is None or left blank, no messages will be sent.
emit_via = {{ updates_emit_via }}


[email]
# The address to send email messages from.
email_from = {{ updates_email_from }}

# List of addresses to send messages to.
email_to = {{ updates_email_to | join(' ') }}

# Name of the host to connect to to send email messages.
email_host = {{ updates_email_host }}


[command]
# The shell command to execute. This is a Python format string, as used in
# str.format(). The format function will pass a shell-quoted argument called
# `body`.
# command_format = "cat"
{%- if updates_dnf_command_format is defined and updates_dnf_command_format | length %}
command_format = "{{ updates_dnf_command_format }}"
{% endif -%}

# The contents of stdin to pass to the command. It is a format string with the
# same arguments as `command_format`.
# stdin_format = "{body}"
{%- if updates_dnf_stdin_format is defined and updates_dnf_stdin_format | length %}
stdin_format = "{{ updates_dnf_stdin_format }}"
{% endif -%}


[command_email]
# The shell command to use to send email. This is a Python format string,
# as used in str.format(). The format function will pass shell-quoted arguments
# called body, subject, email_from, email_to.
# command_format = "mail -s {subject} -r {email_from} {email_to}"
{%- if updates_dnf_email_command_format is defined and updates_dnf_email_command_format | length %}
command_format = "{{ updates_dnf_email_command_format }}"
{% endif -%}

# The contents of stdin to pass to the command. It is a format string with the
# same arguments as `command_format`.
# stdin_format = "{body}"
{%- if updates_dnf_email_stdin_format is defined and updates_dnf_email_stdin_format | length %}
stdin_format = "{{ updates_dnf_stdin_format }}"
{% endif -%}

# The address to send email messages from.
email_from = {{ updates_email_from }}

# List of addresses to send messages to.
email_to = {{ updates_email_to | join(' ') }}

{%- if (updates_dnf_base is defined and updates_dnf_base | length) or (updates_blackist is defined and updates_blacklist | length) %}
[base]
# This section overrides dnf.conf
exclude = {{ updates_blacklist | join(' ') }}
{%- if updates_dnf_base is defined and updates_dnf_base | length > 0 %}
{%- for base_item in updates_dnf_base | dict2items %}
{{ base_item.key }} = {{ base_item.value }}
{% endfor -%}
{% endif -%}

{% endif -%}